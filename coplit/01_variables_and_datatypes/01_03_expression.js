let num1, num2, result;
// TODO : 변수 num1에 숫자 5를 할당하고, 변수 num2에 숫자 7을 할당한 후, 변수 result에 숫자가 할당된 변수 num1과 num2의 곱을 할당합니다.

num1 = 5;
num2 = 7;

result = num1 * num2;

// ## **값의 표현(expression)**

// 표현식(expression)은 하나의 **값**으로 **표현**되는 코드를 의미합니다. 우리는 수학에서 `1 + 1`이 무엇을 의미하는지 굳이 확인하지 않아도 잘 알고 있습니다. `2`를 **표현** 하고 있습니다. 자바스크립트도 이러한 글자, 숫자, 기호를 한 글자씩 "독해"하여 하나의 값으로 컴파일(compile)합니다. 크롬 콘솔창에서 `1 + 1`을 입력해보시면 어떤 값으로 컴파일 되는지 알 수 있습니다.

// 표현식은 변수로 구성되기도 합니다. 중학교 수학 시간에 배운 **거속시**
// 라는 말이 기억이 나실지 모르겠습니다. *(저만..?)*
//  우리가 `speed`와 `distance`를 알고 있다면, `time`을 구할 수 있습니다. 한시간에 5km를 달리는 [Runcat](https://apps.apple.com/us/app/runcat/id1429033973?mt=12)이 10km를 가기 위해서는? 2시간이 걸릴 것입니다. 다만 [자연어](https://namu.wiki/w/%EC%9E%90%EC%97%B0%20%EC%96%B8%EC%96%B4%20%EC%B2%98%EB%A6%AC)를 이해하지 못하는 자바스크립트가 이를 계산하기 위해서는 아래와 같은 코드가 필요합니다.

// ```jsx
// let speed, distance, time;
// speed = 5;
// distance = 10;
// time = distance / speed; // JS : speed와 distance의 값을 조회하여, `/` 연산자와 함께 컴파일 한다!
// ```

// 좋아요 ! 이제 비슷한 문제를 한 번 풀어볼까요?

// ## **문제**

// 변수 `num1`에 숫자 `5`를 할당하고, 변수 `num2`에 숫자 `7`을 할당한 후, 변수 `result`에 숫자 `num1`과 숫자 `num2`의 곱을 할당합니다.
